#!/usr/bin/env python

import os
from optparse import OptionParser

from skadi.core.demo import Demo
from skadi.cli.delegate import CreatesDTs, ProcessesPackets
from skadi.model import registry, decoder

usage  = "usage: %prog [options] 12345678.dem ..."
parser = OptionParser(usage)
parser.add_option('-S', '--search',
    action="append",
    help="paths to be searched (in order) for demo files",
)

(options, args) = parser.parse_args()

# This is ghetto and only accepts arguments relative to
# project root, ex. demos/12345678.dem
pwd  = os.path.dirname(__file__)
root = os.path.join(pwd, '..')

for arg in args:
    path   = os.path.join(root, arg)
    replay = Demo(path)

    creates_dts       = CreatesDTs()
    processes_packets = ProcessesPackets()

    replay.register(creates_dts, Demo.SendTables)
    replay.register(processes_packets, Demo.Packet)
    replay.parse()

    registry = registry.build_with(creates_dts.dts)
    dts      = registry.select(lambda dt: dt.encoded)

    print
    print "DTI-like Summary:"
    print "  Send Tables:    {0}".format(len(dts))
    print "  Send props:     {0}".format(len(registry.sendprops()))
    print "  Flat props:     TBD"
    print "  Int props:      {0}".format(len(registry.tInt(dts=dts)))
    print "  Float props:    {0}".format(len(registry.tFloat(dts=dts)))
    print "  Vector props:   {0}".format(len(registry.tVector(dts=dts)))
    print "  VectorXY props: {0}".format(len(registry.tVectorXY(dts=dts)))
    print "  String props:   {0}".format(len(registry.tString(dts=dts)))
    print "  Array props:    {0}".format(len(registry.tArray(dts=dts)))
    print "  Table props:    {0}".format(len(registry.tDataTable(dts=dts)))
    print "  Exclu props:    {0}".format(len(registry.fExclude(dts=dts)))

    decoder = decoder.build_with(registry)

    for dt in dts:
        flatprops = decoder.flatten(dt)
