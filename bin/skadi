#!/usr/bin/env python

import os
from optparse import OptionParser

from skadi.core.demo import Demo
from skadi.cli.delegate.creates_dts import CreatesDTs
from skadi.cli.delegate.processes_packets import ProcessesPackets
from skadi.cli.model import tree, encoder

usage  = "usage: %prog [options] 12345678.dem ..."
parser = OptionParser(usage)
parser.add_option('-S', '--search',
    action="append",
    help="paths to be searched (in order) for demo files",
)

(options, args) = parser.parse_args()

# This is ghetto and only accepts arguments relative to
# project root, ex. demos/12345678.dem
pwd  = os.path.dirname(__file__)
root = os.path.join(pwd, '..')

for arg in args:
    path   = os.path.join(root, arg)
    replay = Demo(path)

    creates_dts       = CreatesDTs()
    processes_packets = ProcessesPackets()

    replay.register(creates_dts, Demo.SendTables)
    replay.register(processes_packets, Demo.Packet)
    replay.parse()

    tree                   = tree.build_with(creates_dts.dts)
    nodes_with_encoded_dts = tree.select(lambda node, depth: node.dt.encoded)

    for node in nodes_with_encoded_dts:
        print "{0}".format(node.dt.name)

        exclusions = encoder.amass_exclusions(tree, node.dt)
        if exclusions:
            print "  exclusions:"
            for index, e in enumerate(exclusions):
                print "    {0}: {1}".format(str(index).ljust(3), '.'.join(e[::-1]))

        heap = encoder.amass_sendprops(tree, node.dt, exclusions)
        if heap:
            print "  flattened:"
            for index, s in enumerate(encoder.order_sendprops(heap)):
                print "    {0}: {1}".format(str(index).ljust(3), s)
